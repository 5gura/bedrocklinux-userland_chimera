#!/bedrock/libexec/busybox sh
#
# brl apply
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2018 Daniel Thau <danthau@bedrocklinux.org>
#
# (re)loads configuration

. /bedrock/share/common-code
# Remove typical runtime sanity checks, as leaving a system half-configured is
# worse than aborting mid-configure.
set +eu
trap '' EXIT

print_help() {
	printf "Usage: ${color_cmd}brl apply ${color_sub}[options]${color_norm}

Apply ${color_file}/bedrock/etc/bedrock.conf${color_norm} configuration changes.  Requires root.

Options:
  ${color_cmd}-h${color_norm}, ${color_cmd}--help${color_norm}   print this message

Example:
  ${color_cmd}$ brl which startx
  ${color_strat}debian
  ${color_rcmd}# vim /bedrock/etc/bedrock.conf
  ${color_sub}<pin startx to arch>
  ${color_cmd}$ brl which startx
  ${color_strat}debian
  ${color_rcmd}# brl apply
  ${color_cmd}$ brl which startx
  ${color_strat}arch
${color_norm}"
}

handle_help "${@:-}"

require_root

if [ "${1:-}" != "--skip-repair" ]; then
	# Repair strata to apply stratum-status changing configuration
	/bedrock/libexec/brl-repair "bedrock"
	/bedrock/libexec/brl-repair "init"
	for stratum in $(list_strata); do
		is_bedrock "${stratum}" && continue
		is_init "${stratum}" && continue
		is_enabled "${stratum}" || continue
		/bedrock/libexec/brl-repair "${stratum}"
	done
fi

# lock after brl-repair above, as it locks
lock

# Configure crossfs.  Items below reference crossfs, and so this should be done
# early.
cfg_crossfs "/proc/1/root/bedrock/strata/bedrock/bedrock/cross"

# Configure /sys
if [ -w /sys/module/firmware_class/parameters/path ] && [ -d /bedrock/cross/firmware ]; then
	# Ensure the kernel knows about cross-strata firmware
	printf "/bedrock/cross/firmware" >/sys/module/firmware_class/parameters/path
fi

# Populate various /bedrock/run files based on bedrock.conf.  brl-enable/repair
# ensures these are used where appropriate, e.g. symlinked to from /etc.
ln -fs "/bedrock/cross/zoneinfo/$(cfg_value "locale" "timezone")" /bedrock/run/localtime
(
	echo "TZ=:/etc/localtime"
	echo "LANG=$(cfg_value "locale" "LANG")"
	echo "PATH=$(cfg_value "env-vars" "PATH")"
	echo "MANPATH=$(cfg_value "env-vars" "MANPATH")"
	echo "INFOPATH=$(cfg_value "env-vars" "INFOPATH")"
	echo "XDG_DATA_DIRS=$(cfg_value "env-vars" "XDG_DATA_DIRS")"
	echo "TERMINFO_DIRS=$(cfg_value "env-vars" "TERMINFO_DIRS")"
) >/bedrock/run/environment
(
	echo "export TZ=:/etc/localtime"
	echo "export LANG=$(cfg_value "locale" "LANG")"
	echo "export PATH=$(cfg_value "env-vars" "PATH")"
	echo "export MANPATH=$(cfg_value "env-vars" "MANPATH")"
	echo "export INFOPATH=$(cfg_value "env-vars" "INFOPATH")"
	echo "export XDG_DATA_DIRS=$(cfg_value "env-vars" "XDG_DATA_DIRS")"
	echo "export TERMINFO_DIRS=$(cfg_value "env-vars" "TERMINFO_DIRS")"
) >/bedrock/run/profile
(
	echo ". /bedrock/run/profile"
	echo "export fpath=(/bedrock/share/zsh/completion/ \$fpath /bedrock/cross/zsh-completion/)"
) >/bedrock/run/zprofile
(
	echo "set TZ :/etc/localtime"
	echo "set LANG $(cfg_value "locale" "LANG")"
	echo "set PATH $(cfg_value "env-vars" "PATH" | sed 's/:/ /g')"
	echo "set MANPATH $(cfg_value "env-vars" "MANPATH" | sed 's/:/ /g')"
	echo "set INFOPATH $(cfg_value "env-vars" "INFOPATH")"
	echo "set XDG_DATA_DIRS $(cfg_value "env-vars" "XDG_DATA_DIRS")"
	echo "set TERMINFO_DIRS $(cfg_value "env-vars" "TERMINFO_DIRS")"
) >/bedrock/run/fprofile
(
	echo "Defaults secure_path=\"$(cfg_value "env-vars" "PATH")\""
) >/bedrock/run/sudoers
if [ -d /bedrock/cross/fonts ]; then
	(
		echo "Section \"Files\""
		find /bedrock/cross/fonts -mindepth 1 -type d -exec echo "    FontPath \"{}\"" \;
		echo "EndSection"
	) >/bedrock/run/xorg-fonts
fi

# Configure various global files in-place.
if [ -r /etc/login.defs ] && awk -F'=' -v"path=$(cfg_value "env-vars" "PATH")" '
	# Ensure login.defs uses Bedrock $PATH.
	#
	/^[ \t]*ENV_SUPATH[ \t][ \t]*PATH=/ && $2 == path {s=1}
	/^[ \t]*ENV_PATH[ \t][ \t]*PATH=/ && $2 == path {n=1}
	END {exit (s+n==2)}' /etc/login.defs; then
	awk -F'=' -v"path=$(cfg_value "env-vars" "PATH")" '
	/^[ \t]*ENV_SUPATH[ \t][ \t]*PATH=/ {
		print "ENV_SUPATH\tPATH="path
		s=1
		next
	}
	/^[ \t]*ENV_PATH[ \t][ \t]*PATH=/ {
		print "ENV_PATH\tPATH="path
		n=1
		next
	}
	1
	END {
		if(s == 0) {
			print "ENV_SUPATH\tPATH="path
		}
		if(n == 0) {
			print "ENV_PATH\tPATH="path
		}
	}
	' /etc/login.defs >/etc/login.defs-new
	mv /etc/login.defs-new /etc/login.defs
fi
if [ -r /etc/fstab ] && awk '$1$2$3$4$5$6 !~ "#" && $6 != "" && $6 != 0 {x=1} END {exit !x}' /etc/fstab; then
	# Bedrock creates bind mounts referencing the root directory which
	# confuse various init systems attempts to fsck the root directory.
	# Thus, disable configuration indicating the root directory should be
	# fscked.
	awk '
		$1$2$3$4$5$6 !~ "#" && $6 != "" && $6 != 0 {
			$6 = "0"
		}
		{
			print
		}
	' /etc/fstab >/etc/fstab-new && mv /etc/fstab-new /etc/fstab
fi

if [ -w /sys/module/firmware_class/parameters/path ] && [ -d /bedrock/cross/firmware ]; then
	printf "/bedrock/cross/firmware" >/sys/module/firmware_class/parameters/path
fi

for stratum in $(/bedrock/bin/brl list -ei); do
	root="$(stratum_root --empty "${stratum}")"
	seconfig="/proc/1/root${root}/etc/selinux/config"
	if grep -q '^SELINUX=enforcing' "${seconfig}" 2>/dev/null || grep -q '^SELINUX=permissive' "${seconfig}" 2>/dev/null; then
		sed 's/^SELINUX=/SELINUX=disabled/' "${seconfig}" >"${seconfig}-"
		mv "${seconfig}-" "${seconfig}"
	fi
done

need_shell_change=false
while read -r line; do
	shell="$(echo "${line}" | awk -F":" '{print$7}')"
	subline="$(echo "${line}" | awk -F":" -vOFS=":" '{$7="";print}')"
	name="$(basename "${shell}")"
	crosspath="/bedrock/cross/bin/$(basename "${shell}")"

	if echo "${shell}" | grep -q '^/bedrock/cross/'; then
		true
	elif ! [ -x "${crosspath}" ]; then
		true
	else
		need_shell_change=true
		break
	fi
done </etc/passwd
if "${need_shell_change}"; then
	cp -a /etc/passwd /etc/passwd-
	while read -r line; do
		shell="$(echo "${line}" | awk -F":" '{print$7}')"
		subline="$(echo "${line}" | awk -F":" -vOFS=":" '{$7="";print}')"
		name="$(basename "${shell}")"
		crosspath="/bedrock/cross/bin/$(basename "${shell}")"

		if echo "${shell}" | grep -q '^/bedrock/cross/'; then
			echo "${line}"
		elif ! [ -x "${crosspath}" ]; then
			echo "${line}"
		else
			echo "${subline}/bedrock/cross/bin/${name}"
		fi
	done </etc/passwd >/etc/passwd-
	if [ "$(cat /etc/passwd)" != "$(cat /etc/passwd-)" ] &&
		[ "$(wc -l /etc/passwd | cut -d' ' -f1)" = "$(wc -l /etc/passwd- | cut -d' ' -f1)" ]; then
		mv /etc/passwd- /etc/passwd
		enforce_shells
	else
		rm /etc/passwd-
	fi
fi

exit_success
