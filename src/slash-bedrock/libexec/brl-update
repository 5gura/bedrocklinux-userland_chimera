#!/bedrock/libexec/busybox sh
#
# brl update
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2018 Daniel Thau <danthau@bedrocklinux.org>
#
# Updates Bedrock Linux system

. /bedrock/share/common-code

print_help() {
	printf "Usage: ${color_cmd}brl update ${color_sub}[options]${color_norm}

Fetches and applies updates to ${color_term}bedrock stratum${color_norm}.

Options:
  ${color_sub}<none>${color_norm}                 fetch and apply update from configured mirror
  ${color_cmd}-m, --mirror ${color_sub}[mirror]${color_norm}  fetch and apply update from specified mirror
  ${color_cmd}-s, --skip-check       ${color_norm}skip cryptographic signature check
  ${color_cmd}-h${color_norm}, ${color_cmd}--help${color_norm}             print this message

Example:
  ${color_cmd}$ brl version
  ${color_norm}Bedrock Linux 0.7.0 Poki
  ${color_rcmd}# brl update
  ${color_sub}<update progress>
  ${color_cmd}$ brl version
  ${color_norm}Bedrock Linux 0.7.1 Poki
${color_norm}"
}

handle_help "${@:-}"

mirror=""
skip_check=false

OPTL="mirror:,skip-check"
OPTO="m:s"
eval set -- "$(getopt -q -l "${OPTL}" -- "${OPTO}" "${@}")" || true
saw_non_positional=false

while [ -n "${1:-}" ]; do
	case "${1}" in
	-m | --mirror)
		mirror="${2}"
		shift
		shift
		;;
	-s | --skip-check)
		skip_check=true
		shift
		;;
	--)
		shift
		;;
	-*)
		if "${saw_non_positional}"; then
			eval set -- "$(getopt -q -l "${OPTL}" -- "${OPTO}" "${@}")" || true
			saw_non_positional=false
		else
			abort "Unrecognized argument: ${1}"
		fi
		;;
	*)
		abort "Unrecognized argument: ${1}"
		;;
	esac
done

require_root
lock

if ! "${skip_check}" && ! type -p gpg >/dev/null 2>&1; then
	abort "gpg required for cryptographic signature verification.  Either install it or use -s flag to disable check."
fi

if [ -n "${mirror}" ]; then
	mirrors="${mirror}"
else
	mirrors="$(cfg_values miscellaneous mirrors)"
fi

notice "Checking for updates"

current_version="$(awk '{print$3}' </bedrock/etc/bedrock-release)"
newest_version="${current_version}"
newest_update_url=""
found_valid_mirror=false
for update_list_url in ${mirrors}; do
	rm -rf /bedrock/var/releases
	if ! wget -O- "${update_list_url}" >/bedrock/var/releases; then
		notice "${update_list_url} fetch failed, trying next mirror"
		continue
	fi
	found_valid_mirror=true
	IFS="
"
	while read -r update_url; do
		if ! echo "${update_url}" | grep -q "^http"; then
			continue
		fi
		arch="$(echo "${update_url}" | awk -F'[-.]' '{print $(NF-1)}')"
		if [ "${arch}" != "$(uname -m)" ]; then
			continue
		fi
		version="$(echo "${update_url}" | awk -F'-' '{print $(NF-1)}')"
		if ver_cmp_first_newer "${version}" "${newest_version}"; then
			newest_version="${version}"
			newest_update_url="${update_url}"
		fi
	done </bedrock/var/releases
	rm -rf /bedrock/var/releases
done
if ! "${found_valid_mirror}"; then
	abort "No working mirrors found"
fi
if [ -z "${newest_update_url}" ]; then
	notice "No updates"
	trap '' EXIT
	return
fi
notice "Found update at ${color_link}${newest_update_url}${color_norm}"

notice "Downloading update"
update_combine="/bedrock/var/bedrock-linux-${version}-${arch}.sh-combine"
update_file="/bedrock/var/bedrock-linux-${version}-${arch}.sh"
update_sig="/bedrock/var/bedrock-linux-${version}-${arch}.sh.asc"
rm -f "${update_combine}" "${update_file}" "${update_sig}"
if ! wget -O- "${newest_update_url}" >"${update_combine}" 2>/dev/null; then
	rm -f "${update_combine}"
	abort "Unable to download update."
fi

notice "Preparing gpg"
homedir="/bedrock/var/gnupg"
rm -rf "${homedir}"
mkdir -p "${homedir}"
chmod go-rwx "${homedir}"
gpg --homedir "${homedir}" --import /bedrock/gnupg-keys/*

notice "Verifying update"
sed -n '/^-----BEGIN PGP SIGNATURE-----$/,/^-----END PGP_SIGNATURE-----$/p' "${update_combine}" >"${update_sig}"
lines_sig="$(wc -l <"${update_sig}")"
lines_combine="$(wc -l <"${update_combine}")"
lines_file="$((lines_combine - lines_sig))"
head -n "${lines_file}" "${update_combine}" >"${update_file}"

if ! "${skip_check}" && ! gpg --homedir "${homedir}" --verify "${update_sig}" "${update_file}"; then
	rm -rf "${homedir}" "${update_combine}" "${update_file}" "${update_sig}"
	abort "Signature verification failed."
fi

notice "Applying update"

chmod a+rx "${update_file}"
"${update_file}" --update
rm -rf "${homedir}" "${update_combine}" "${update_file}" "${update_sig}"

exit_success
