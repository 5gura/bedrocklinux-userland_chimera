#!/bedrock/libexec/busybox sh
#
# Debian bootstrap support
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2016-2018 Daniel Thau <danthau@bedrocklinux.org>
#

. /bedrock/share/common-code
trap 'fetch_abort "Unexpected error occurred."' EXIT

bootstrap_deps="debootstrap apt dpkg coreutils dash bash grep sed awk perl bzip2 gzip tar gpgv debian-archive-keyring"

check_supported() {
	case "$(uname -m)" in
	"x86_64") true ;;
	"armv7l") true ;;
	*) false ;;
	esac
}

check_experimental() {
	false
}

distro_arch_name() {
	case "$(uname -m)" in
	"x86_64") echo "amd64" ;;
	"armv7l") echo "armhf" ;;
	*) fetch_abort "brl-fetch does not support distro/architecture pair" ;;
	esac
}

list_mirrors() {
	arch="$(distro_arch_name)"
	mirror_list_url='https://www.debian.org/mirror/list'
	wget -O- "${mirror_list_url}" 2>/dev/null |
		awk '/Primary Debian mirror sites/,/<\/div/' |
		grep -B3 "\<${arch}\>" |
		list_links |
		grep "^http"
}

speed_test_url() {
	echo "dists/${release}/Release"
}

list_releases() {
	for mirror in "${flag_mirror:-}" $(list_mirrors); do
		if wget -O- "${mirror}/dists" 2>/dev/null |
			list_links |
			grep '/$' |
			grep -v -- '-' |
			grep -ve '[.]' -ve '^/' -ve 'experimental' |
			sed 's,/$,,g'; then
			break
		fi
	done
}

default_release() {
	echo "stable"
}

fetch() {
	step_init 14

	if [ -z "${target_dir:-}" ]; then
		fetch_abort "Essential variable not set"
	fi

	step "Determining name"
	name="${flag_name:-${distro}}"
	notice "Using ${color_strat}${name}${color_norm}"

	step "Determining CPU architecture"
	arch="$(distro_arch_name)"
	notice "Using ${color_file}${arch}${color_norm}"

	step "Determining release"
	release="${flag_release:-$(default_release)}"
	notice "Using ${color_file}${release}${color_norm}"

	step "Determining mirror"
	mirror="$(pick_mirror "$(speed_test_url)")"
	notice "Using ${color_link}${mirror}${color_norm}"

	step "Making directory structure"
	bootstrap_dir="${target_dir}/brl-bootstrap"
	mkdir -p "${target_dir}" "${bootstrap_dir}/target-root"

	step "Downloading package information database"
	wget -O "${bootstrap_dir}/Packages.gz" "${mirror}/dists/${release}/main/binary-${arch}/Packages.gz"
	gunzip "${bootstrap_dir}/Packages.gz"

	step "Converting distro package information database to brl format"
	debdb_to_brldb "${bootstrap_dir}/Packages" "${bootstrap_dir}/brldb"

	step "Calculating required bootstrap packages"
	brldb_calculate_paths_with_deps "${bootstrap_dir}/brldb" "${bootstrap_dir}/package_paths" "${bootstrap_deps}"

	step "Downloading bootstrap packages"
	download_files "${bootstrap_dir}" "$(awk -v"m=${mirror}" '{print m"/"$0}' "${bootstrap_dir}/package_paths")"

	step "Extracting bootstrap packages"
	extract_debs "${bootstrap_dir}" "${bootstrap_dir}"/*.deb

	step "Running bootstrap software"
	setup_chroot "${bootstrap_dir}"
	mount --bind "${target_dir}" "${bootstrap_dir}/target-root"
	set +o pipefail
	yes "" | LANG=C chroot "${bootstrap_dir}" debootstrap --variant=minbase "${release}" "/target-root" "${mirror}"
	set -o pipefail

	step "Removing temporary bootstrap files"
	less_lethal_rm_rf "${bootstrap_dir}"

	step "Configuring"
	if [ "${release}" != "sid" ] && [ "${release}" != "unstable" ]; then
		echo "deb http://security.debian.org/ ${release}/updates main" >>"${target_dir}/etc/apt/sources.list"
	fi
	set +o pipefail
	setup_chroot "${target_dir}"
	yes "" | LANG=C chroot "${target_dir}" /usr/bin/apt-get update
	yes "" | LANG=C chroot "${target_dir}" /usr/bin/apt-get install locales-all
	tear_down_chroot "${target_dir}"
	set -o pipefail

	step "Successfully acquired ${distro} stratum"
}
