#!/bedrock/libexec/busybox sh
#
# CentOS bootstrap support
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2016-2018 Daniel Thau <danthau@bedrocklinux.org>
#

. /bedrock/share/common-code
trap 'fetch_abort "Unexpected error occurred."' EXIT

check_arch_support() {
	[ "$(uname -m)" = "x86_64" ]
}

list_mirrors() {
	mirror_list_url="http://mirror-status.centos.org/"
	wget -O- "$mirror_list_url" 2>/dev/null |
		awk '/<H2>report/,/<H3>/' |
		grep -e "HREF" -e ">ok<" |
		awk '/HREF/{l=$0} />ok</{print l}' |
		sed 's,</A>.*$,,' |
		list_links
}

speed_test_url() {
	echo "$release/os/x86_64/isolinux/memtest"
}

list_releases() {
	for mirror in "${flag_mirror:-}" $(list_mirrors); do
		# This mirror didn't include the latest release during testing
		# while spot checking a bunch of others did.  Just skip it.
		[ "$mirror" = "http://centos.xfree.com.ar/" ] && continue
		if wget -O- "$mirror" 2>/dev/null |
			list_links |
			grep '^[0-9][0-9]*/$' |
			sed 's,/$,,'; then
			break
		fi
	done
}
default_release() {
	list_releases |
		sort -n |
		tail -n1
}

determine_package_manager() {
	if [ -e "$bootstrap_dir/brldb/depends/dn" ] && grep -q '^dnf\>' "$bootstrap_dir/brldb/depends/dn"; then
		echo "dnf"
	else
		echo "yum"
	fi
}

bootstrap_deps() {
	echo "$package_manager rpm centos-release filesystem"
}

fetch() {
	step_init 12

	if [ -z "${target_dir:-}" ] || [ -z "${arch:-}" ] || [ -z "${arch2:-}" ]; then
		abort "Essential variable not set"
	fi

	step "Determining name"
	name="${flag_name:-${distro}}"
	notice "Using ${color_strat}${name}${color_norm}"

	step "Determining release"
	release="${flag_release:-$(default_release)}"
	notice "Using ${color_file}${release}${color_norm}"

	step "Determining mirror"
	mirror="$(pick_mirror "$(speed_test_url)")"
	notice "Using ${color_link}$mirror${color_norm}"

	step "Making directory structure"
	bootstrap_dir="$target_dir/brl-bootstrap"
	mkdir -p "$target_dir" "$bootstrap_dir/target-root"

	step "Downloading package information database"
	url="$(find_link "$mirror/$release/os/$arch/repodata/" "primary.xml.gz")"
	wget -O "$bootstrap_dir/primary.xml.gz" "$url"
	gunzip "$bootstrap_dir/primary.xml.gz"

	step "Converting distro package information database to brl format"
	rpmdb_to_brldb "$bootstrap_dir/primary.xml" "$bootstrap_dir/brldb"

	step "Calculating required bootstrap packages"
	package_manager="$(determine_package_manager)"
	brldb_calculate_paths_with_deps "$bootstrap_dir/brldb" "$bootstrap_dir/package_paths" "$(bootstrap_deps)"

	step "Downloading bootstrap packages"
	download_files "$bootstrap_dir" "$(awk -v"m=$mirror/$release/os/$arch" '{print m"/"$0}' "$bootstrap_dir/package_paths")"

	step "Extracting bootstrap packages"
	# This round is just to bootstrap the distro's rpm.
	# Next step we'll use the distro's rpm to install everything properly.
	# Need to extract filesystem first to ensure symlinks are set up
	extract_rpms "$bootstrap_dir" "$bootstrap_dir"/filesystem*.rpm "$bootstrap_dir"/*.rpm

	step "Installing bootstrap packages"
	setup_chroot "$bootstrap_dir"
	LC_ALL=C chroot "$bootstrap_dir" rpm -i ./*.rpm 2>&1 | progress_unknown

	step "Running bootstrap software"
	mount --bind "$target_dir" "$bootstrap_dir/target-root"
	LC_ALL=C chroot "$bootstrap_dir" rpm -i --root=/target-root --nodeps centos-release-*.rpm 2>/dev/null || true
	LC_ALL=C chroot "$bootstrap_dir" "$package_manager" --installroot=/target-root install -y rpm-build "$package_manager" centos-repos

	step "Removing temporary bootstrap files"
	less_lethal_rm_rf "$bootstrap_dir"

	notice "Successfully acquired $distro stratum"
}
