#!/bedrock/libexec/busybox sh
#
# Solus bootstrap support
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2019 Daniel Thau <danthau@bedrocklinux.org>
#

. /bedrock/share/common-code
trap 'fetch_abort "Unexpected error occurred."' EXIT

check_supported() {
	false
}

speed_test_url() {
	echo "packages/shannon/eopkg-index.xml.xz"
}

list_mirrors() {
	# Could not find list of mirrors.  This was the default mirror found on
	# a fresh install.
	echo "https://mirrors.rit.edu/solus/"
}

brl_arch_to_distro() {
	case "${1}" in
	"x86_64") echo "x86_64" ;;
	*) abort "brl does not know how to translate arch \"${1}\" to ${distro:-} format" ;;
	esac
}

list_architectures() {
	echo "x86_64"
}

default_release() {
	echo "rolling"
}

list_releases() {
	echo "rolling"
}

fetch() {
	step "Downloading package information database"
	wget "${target_mirror:-}/packages/shannon/eopkg-index.xml.xz" -O "${bootstrap_dir:-}/eopkg-index.xml.xz"
	unxz "${bootstrap_dir:-}/eopkg-index.xml.xz"

	step "Converting distro package information database to brl format"
	eopkgdb_to_brldb "${bootstrap_dir:-}/eopkg-index.xml" "${bootstrap_dir:-}/brldb"

	step "Calculating required bootstrap packages"
	bootstrap_deps="$(cat "${bootstrap_dir:-}/brldb/required")"
	brldb_calculate_paths_with_deps "${bootstrap_dir:-}/brldb" "${bootstrap_dir:-}/package_paths" "${bootstrap_deps}"

	step "Downloading bootstrap packages"
	download_files "${bootstrap_dir:-}" "$(awk -v"m=${target_mirror:-}" '{print m"/packages/shannon/"$0}' "${bootstrap_dir:-}/package_paths")"

	step "Extracting bootstrap packages"
	(
		cd "${bootstrap_dir:-}"
		total="$(echo baselayout-*.eopkg ./*.eopkg | wc -w)"
		for pkg in baselayout-*.eopkg *.eopkg; do
			unzip -qo "${pkg}"
			tar xf "install.tar.xz"
			echo "x"
		done | progress_bar "${total}"
	)

	step "Running bootstrap software"
	setup_chroot "${bootstrap_dir:-}"
	(
		# eopkg errors when installing baselayout, presumably due to
		# missing assumed files.
		cd "${bootstrap_dir:-}"
		unzip -qo "baselayout-"*.eopkg
		tar xf "install.tar.xz" -C "${target_dir:-}"
	)

	mkdir -p "${bootstrap_dir:-}/run/dbus"
	chroot "${bootstrap_dir:-}" dbus-daemon --system
	chroot "${bootstrap_dir:-}" eopkg --debug -y -D/target-root rdb
	chroot "${bootstrap_dir:-}" eopkg -y -D/target-root ar Solus "${target_mirror:-}/packages/shannon/eopkg-index.xml.xz"
	chroot "${bootstrap_dir:-}" eopkg -y -D/target-root install -c system.base

	# perl is an unlisted required package.  Installing vim runs /usr/bin/c_rehash which requires perl.
	chroot "${bootstrap_dir:-}" eopkg -y -D/target-root install perl
	# Installing fontcache rename()s from /etc to /usr, which EXDEVs.
	if [ -e "${target_dir:-}/etc/fonts" ]; then
		mv "${target_dir:-}/etc/fonts" "${target_dir:-}/usr/share/fonts"
	fi
	ln -s "../usr/share/fonts" "${target_dir:-}/etc/fonts"
	chroot "${bootstrap_dir:-}" eopkg -y -D/target-root install fontconfig
	# The post-fontcache /etc/fonts symlink is absolute, which confuses
	# `brl status`.  `brl status` should probably be updated to handle
	# this, but for now we can hack around it by making /etc/fonts
	# relative.
	rm "${target_dir:-}/etc/fonts"
	ln -s "../usr/share/fonts" "${target_dir:-}/etc/fonts"
}

eopkgdb_to_brldb() {
	mkdir -p "${2}/depends/" "${2}/provides" "${2}/paths"

	tr -d '\n' <"${1}" |
		sed -e 's,<,\n<,g' -e 's,>\(.\),>\n\1,g' >"${2}/flattened"

	awk -F"[<> ]" -v"dir=${2}" -v"total=$(wc -l <"${2}/flattened")" -v"arch=${distro_arch:-}" '
		function brldbpath(type, name) {
			if (substr(name,1,3) == "lib") {
				return dir "/" type "/" substr(name, 4, 2)
			} else {
				return dir "/" type "/" substr(name, 1, 2)
			}
		}
		/<!\[CDATA\[/ {
			skip=1
		}
		/\]\]>/ {
			skip=0
			next
		}
		skip {
			next
		}
		name && uri {
			file = brldbpath("depends", name)
			printf "%s", name >> file
			for (i in depends) {
				printf " %s", depends[i] >> file
				delete depends[i]
			}
			printf "\n" >> file
			close(file)

			file = brldbpath("provides", name)
			print name "\t" name >> file
			close(file)

			file = brldbpath("paths", name)
			print name "\t" uri >> file
			close(file)

			name = ""
			uri = ""
		}
		/^<[^\/]/ && !/\/>$/ {
			path = path ">" $2
			next
		}
		/^<\// {
			sub(">[^>]*$","",path)
			next
		}
		path == ">PISI>Package>Name" {
			name = $0
			next
		}
		path == ">PISI>Package>RuntimeDependencies>Dependency" {
			depends[$0] = $0
			next
		}
		path == ">PISI>Package>PackageURI" {
			uri = $0
			next
		}
		path == ">PISI>Package>PartOf" && name && $0 == "system.base" {
			print name >> dir "/required"
		}
		int(NR * 100 / total) > percent {
			percent = int(NR * 100 / total)
			print "x"
		}
	' "${2}/flattened" | progress_bar 100
}
